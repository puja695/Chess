let ongoingEvaluation = false;
 
 let evaluatedPositions: Position[] = [];
 let reportResults: Report | undefined;
 
 function logAnalysisInfo(message: string) {
     $("#status-message").css("display", "block");
 
     $("#status-message").css("background", "rgba(49, 51, 56, 255)");
     $("#status-message").css("color", "white");
     $("#status-message").html(message);
 }
 
 function logAnalysisError(message: string) {
     $("#evaluation-progress-bar").css("display", "none");
     $("#secondary-message").html('');
     $("#status-message").css("padding", "10px 3px 10px 3px");
     $("#status-message").css("display", "block");
     $("#status-message").css("background", "rgba(239, 65, 70, 0.4");
     $("#status-message").css("color", "white");
 
     $("#status-message").html(`<i class="fa-solid fa-circle-info" style="color: #ffffff;"></i>` + message);
 
     ongoingEvaluation = false;
 }
 
 async function evaluate() {
     // Remove and reset CAPTCHA, remove report cards, display progress bar
     $(".g-recaptcha").css("display", "none");
     grecaptcha.reset();
 
     $("#report-cards").css("display", "none");
     $("#evaluation-progress-bar").css("display", "none");
 
 
 
 
     // Disallow evaluation if another evaluation is ongoing
     if (ongoingEvaluation) return;
     ongoingEvaluation = true;
 
     // Extract input PGN and target depth
     let pgn = $("#pgn").val()!.toString();
     let depth = parseInt($("#depth-slider").val()!.toString());
 
     // Content validate PGN input
     if (pgn.length == 0) {
         return logAnalysisError("Provide a game to analyse.");
     }
 
     // Post PGN to server to have it parsed
     $("#status-message").css("padding", "10px 3px 10px 3px");
     logAnalysisInfo("Parsing PGN...");
 
     try {
         let parseResponse = await fetch("/api/parse", {
             method: "POST",
             headers: {
                 "Content-Type": "application/json",
             },
             body: JSON.stringify({ pgn }),
         });
 
         let parsedPGN: ParseResponse = await parseResponse.json();
 
         if (!parseResponse.ok) {
             return logAnalysisError(
                 parsedPGN.message ?? "Failed to parse PGN.",
             );
         }
 
         var positions = parsedPGN.positions!;
     } catch {
         return logAnalysisError("Failed to parse PGN.");
     }
 
     // Update board player usernames
     whitePlayer.username =
         pgn.match(/(?:\[White ")(.+)(?="\])/)?.[1] ?? "White Player";
     whitePlayer.rating = pgn.match(/(?:\[WhiteElo ")(.+)(?="\])/)?.[1] ?? "?";
 
     blackPlayer.username =
         pgn.match(/(?:\[Black ")(.+)(?="\])/)?.[1] ?? "Black Player";
     blackPlayer.rating = pgn.match(/(?:\[BlackElo ")(.+)(?="\])/)?.[1] ?? "?";
 
     updateBoardPlayers();
 
     $("#secondary-message").html("It can take around a minute to process a full game.");
 
     // Fetch cloud evaluations where possible
     for (let position of positions) {
         function placeCutoff() {
             let lastPosition = positions[positions.indexOf(position) - 1];
             if (!lastPosition) return;
 
             let cutoffWorker = new Stockfish();
             cutoffWorker
                 .evaluate(lastPosition.fen, depth)
                 .then((engineLines) => {
                     lastPosition.cutoffEvaluation = engineLines.find(
                         (line) => line.id == 1,
                     )?.evaluation ?? { type: "cp", value: 0 };
                 });
         }
 
         let queryFen = position.fen.replace(/\s/g, "%20");
         let cloudEvaluationResponse;
         try {
             cloudEvaluationResponse = await fetch(
                 `https://lichess.org/api/cloud-eval?fen=${queryFen}&multiPv=2`,
                 {
                     method: "GET",
                 },
             );
 
             if (!cloudEvaluationResponse) break;
         } catch {
             break;
         }
 
         if (!cloudEvaluationResponse.ok) {
             placeCutoff();
             break;
         }
 
         let cloudEvaluation = await cloudEvaluationResponse.json();
 
         position.topLines = cloudEvaluation.pvs.map((pv: any, id: number) => {
             const evaluationType = pv.cp == undefined ? "mate" : "cp";
             const evaluationScore = pv.cp ?? pv.mate ?? "cp";
 
             let line: EngineLine = {
                 id: id + 1,
                 depth: depth,
                 moveUCI: pv.moves.split(" ")[0] ?? "",
                 evaluation: {
                     type: evaluationType,
                     value: evaluationScore,
                 },
             };
 
             let cloudUCIFixes: { [key: string]: string } = {
                 e8h8: "e8g8",
                 e1h1: "e1g1",
                 e8a8: "e8c8",
                 e1a1: "e1c1",
             };
             line.moveUCI = cloudUCIFixes[line.moveUCI] ?? line.moveUCI;
 
             return line;
         });
 
         if (position.topLines?.length != 2) {
             placeCutoff();
             break;
         }
 
         position.worker = "cloud";
 
         let progress =
             ((positions.indexOf(position) + 1) / positions.length) * 100;
         $("#evaluation-progress-bar").attr("value", progress);
         logAnalysisInfo(`Evaluating positions... (${progress.toFixed(1)}%)`);
     }
 
     // Evaluate remaining positions
     let workerCount = 0;
 
     const stockfishManager = setInterval(() => {
         // If all evaluations have been generated, move on
 
         if (!positions.some((pos) => !pos.topLines)) {
             clearInterval(stockfishManager);
 
             logAnalysisInfo("Evaluation complete.");
             $("#evaluation-progress-bar").val(100);
             $(".g-recaptcha").css("display", "inline");
             if(!document.hasFocus()){
                 let snd = new Audio("static/media/ping.mp3");
                 snd.play();
             }
             $("#secondary-message").html(
                 "Please complete the CAPTCHA to continue.",
             );
